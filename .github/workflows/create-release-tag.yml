name: リリースタグ作成

# リポジトリへの書き込み権限を追加
permissions:
  contents: write

on:
  # 他のワークフローからの呼び出しを許可
  workflow_call:
    inputs:
      tag_increment:
        description: 'バージョン増分タイプ'
        required: false
        type: string
        default: 'patch'
      custom_tag:
        description: '独自タグ名（空白の場合は自動生成されます）'
        required: false
        type: string
      prerelease:
        description: 'プレリリースとして作成'
        required: false
        type: string
        default: 'false'
      prerelease_id:
        description: 'プレリリース識別子（beta/alpha/rc）'
        required: false
        type: string
        default: 'beta'
    outputs:
      tag_name:
        description: '作成されたタグ名'
        value: ${{ jobs.create-tag.outputs.tag_name }}
      is_prerelease:
        description: 'プレリリースかどうか'
        value: ${{ jobs.create-tag.outputs.is_prerelease }}

jobs:
  create-tag:
    runs-on: windows-latest
    # 環境を使用してアクセスを制限
    environment: release
    outputs:
      tag_name: ${{ steps.decide_tag.outputs.tag_to_use }}
      is_prerelease: ${{ steps.decide_tag.outputs.is_prerelease }}
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: GitとPowerShellの設定
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: 最新のタグとバージョン情報を取得
        id: get_version
        run: |
          # 最新のタグを取得
          $latestTag = git describe --tags --abbrev=0 2>$null || echo "v0.0.0"
          echo "latest_tag=$latestTag" >> $env:GITHUB_OUTPUT
          
          # v1.2.3 形式からバージョン部分を抽出
          if ($latestTag -match "v?(\d+)\.(\d+)\.(\d+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?") {
            $major = [int]$Matches[1]
            $minor = [int]$Matches[2]
            $patch = [int]$Matches[3]
            
            # 増分タイプに応じてバージョンを更新
            switch ("${{ inputs.tag_increment || github.event.inputs.tag_increment }}") {
              "major" {
                $major++
                $minor = 0
                $patch = 0
              }
              "minor" {
                $minor++
                $patch = 0
              }
              "patch" {
                $patch++
              }
            }
            
            # 新しいバージョンタグを構築
            $newTag = "v${major}.${minor}.${patch}"
            if ("${{ inputs.prerelease || github.event.inputs.prerelease }}" -eq "true") {
              $prelId = "${{ inputs.prerelease_id || github.event.inputs.prerelease_id }}"
              if ([string]::IsNullOrEmpty($prelId)) {
                $prelId = "beta"
              }
              $newTag = "${newTag}-${prelId}"
            }
            echo "new_tag=$newTag" >> $env:GITHUB_OUTPUT
          } else {
            $newTag = "v0.1.0"
            if ("${{ inputs.prerelease || github.event.inputs.prerelease }}" -eq "true") {
              $prelId = "${{ inputs.prerelease_id || github.event.inputs.prerelease_id }}"
              if ([string]::IsNullOrEmpty($prelId)) {
                $prelId = "beta"
              }
              $newTag = "${newTag}-${prelId}"
            }
            echo "new_tag=$newTag" >> $env:GITHUB_OUTPUT
          }
      
      - name: タグ名を決定
        id: decide_tag
        run: |
          # カスタムタグが指定されていればそれを使用、そうでなければ自動生成したタグを使用
          $customTag = "${{ inputs.custom_tag || github.event.inputs.custom_tag }}"
          if ([string]::IsNullOrEmpty($customTag)) {
            $tagToUse = "${{ steps.get_version.outputs.new_tag }}"
          } else {
            # カスタムタグが v で始まらない場合は追加
            if (-not $customTag.StartsWith("v")) {
              $tagToUse = "v$customTag"
            } else {
              $tagToUse = "$customTag"
            }
            
            # プレリリースフラグが有効で、カスタムタグにプレリリース識別子がなければ追加
            if ("${{ inputs.prerelease || github.event.inputs.prerelease }}" -eq "true" -and -not $tagToUse.Contains("-")) {
              $prelId = "${{ inputs.prerelease_id || github.event.inputs.prerelease_id }}"
              if ([string]::IsNullOrEmpty($prelId)) {
                $prelId = "beta"
              }
              $tagToUse = "${tagToUse}-${prelId}"
            }
          }
          
          echo "使用するタグ: $tagToUse"
          echo "tag_to_use=$tagToUse" >> $env:GITHUB_OUTPUT
          
          # タグがプレリリースフォーマットかどうかをチェック
          $isPrerelease = $tagToUse -match "-"
          echo "is_prerelease=$isPrerelease" >> $env:GITHUB_OUTPUT
      
      - name: タグの存在確認
        id: check_tag
        run: |
          $tagToCheck = "${{ steps.decide_tag.outputs.tag_to_use }}"
          $tagExists = git tag -l "$tagToCheck"
          
          if ($tagExists) {
            echo "tag_exists=true" >> $env:GITHUB_OUTPUT
            echo "警告：タグ '$tagToCheck' は既に存在します"
          } else {
            echo "tag_exists=false" >> $env:GITHUB_OUTPUT
          }
      
      - name: タグが既に存在する場合のエラー
        if: steps.check_tag.outputs.tag_exists == 'true'
        run: |
          echo "::error::タグ '${{ steps.decide_tag.outputs.tag_to_use }}' は既に存在します。別のタグ名を選択してください。"
          exit 1
      
      - name: タグ名の確定
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          $tagToCreate = "${{ steps.decide_tag.outputs.tag_to_use }}"
          $isPrerelease = "${{ steps.decide_tag.outputs.is_prerelease }}" -eq "True"

          echo "使用するタグ名: $tagToCreate"
          if ($isPrerelease) {
            echo "このタグはプレリリースとして識別されます"
          }
          echo "タグは release-exe.yml ワークフローでビルド成功後に作成されます"
      
      - name: 結果出力
        run: |
          echo "最新のタグ: ${{ steps.get_version.outputs.latest_tag }}"
          echo "使用するタグ: ${{ steps.decide_tag.outputs.tag_to_use }}"
          $isPrerelease = "${{ steps.decide_tag.outputs.is_prerelease }}" -eq "True"
          if ($isPrerelease) {
            echo "タイプ: プレリリース"
          } else {
            echo "タイプ: 正式リリース"
          }
          echo "これにより、release-exe.ymlワークフローが自動的にトリガーされます。"
          echo "タグはビルド成功後に作成されます。"
          echo "GitHubのActionsタブでリリースビルドの進行状況を確認できます。"